/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/countryCodeMappers";
import * as Parameters from "../models/parameters";
import { GalaxyApiContext } from "../galaxyApiContext";

/** Class representing a CountryCode. */
export class CountryCode {
  private readonly client: GalaxyApiContext;

  /**
   * Create a CountryCode.
   * @param {GalaxyApiContext} client Reference to the service client.
   */
  constructor(client: GalaxyApiContext) {
    this.client = client;
  }

  /**
   * @summary Gets the supported country codes.
   * @param [options] The optional parameters
   * @returns Promise<Models.CountryCodeGetResponse>
   */
  get(options?: msRest.RequestOptionsBase): Promise<Models.CountryCodeGetResponse>;
  /**
   * @param callback The callback
   */
  get(callback: msRest.ServiceCallback<string[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  get(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string[]>): void;
  get(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<string[]>, callback?: msRest.ServiceCallback<string[]>): Promise<Models.CountryCodeGetResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getOperationSpec,
      callback) as Promise<Models.CountryCodeGetResponse>;
  }

  /**
   * @summary Checks if the specified country code is supported.
   * @param countryCodeId The country code.
   * @param [options] The optional parameters
   * @returns Promise<Models.CountryCodeHeadResponse>
   */
  head(countryCodeId: string, options?: msRest.RequestOptionsBase): Promise<Models.CountryCodeHeadResponse>;
  /**
   * @param countryCodeId The country code.
   * @param callback The callback
   */
  head(countryCodeId: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param countryCodeId The country code.
   * @param options The optional parameters
   * @param callback The callback
   */
  head(countryCodeId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  head(countryCodeId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.CountryCodeHeadResponse> {
    return this.client.sendOperationRequest(
      {
        countryCodeId,
        options
      },
      headOperationSpec,
      callback) as Promise<Models.CountryCodeHeadResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v3/api/countrycode",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const headOperationSpec: msRest.OperationSpec = {
  httpMethod: "HEAD",
  path: "v3/api/countrycode/{countryCodeId}",
  urlParameters: [
    Parameters.countryCodeId
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {}
  },
  serializer
};
