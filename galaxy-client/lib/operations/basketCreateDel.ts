/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/basketCreateDelMappers";
import * as Parameters from "../models/parameters";
import { GalaxyApiContext } from "../galaxyApiContext";

/** Class representing a BasketCreateDel. */
export class BasketCreateDel {
  private readonly client: GalaxyApiContext;

  /**
   * Create a BasketCreateDel.
   * @param {GalaxyApiContext} client Reference to the service client.
   */
  constructor(client: GalaxyApiContext) {
    this.client = client;
  }

  /**
   * @summary Creates a new basket.
   * @param model
   * @param [options] The optional parameters
   * @returns Promise<Models.BasketCreateDelCreateBasketResponse>
   */
  createBasket(model: Models.GalaxyApiModelsBasketCreateBasket, options?: msRest.RequestOptionsBase): Promise<Models.BasketCreateDelCreateBasketResponse>;
  /**
   * @param model
   * @param callback The callback
   */
  createBasket(model: Models.GalaxyApiModelsBasketCreateBasket, callback: msRest.ServiceCallback<Models.GalaxyApiModelsBasketCreateBasketResult>): void;
  /**
   * @param model
   * @param options The optional parameters
   * @param callback The callback
   */
  createBasket(model: Models.GalaxyApiModelsBasketCreateBasket, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GalaxyApiModelsBasketCreateBasketResult>): void;
  createBasket(model: Models.GalaxyApiModelsBasketCreateBasket, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.GalaxyApiModelsBasketCreateBasketResult>, callback?: msRest.ServiceCallback<Models.GalaxyApiModelsBasketCreateBasketResult>): Promise<Models.BasketCreateDelCreateBasketResponse> {
    return this.client.sendOperationRequest(
      {
        model,
        options
      },
      createBasketOperationSpec,
      callback) as Promise<Models.BasketCreateDelCreateBasketResponse>;
  }

  /**
   * @summary Deletes the basket with the specified id.
   * @param basketId The basket identifier.
   * @param [options] The optional parameters
   * @returns Promise<Models.BasketCreateDelDeleteBasketResponse>
   */
  deleteBasket(basketId: number, options?: msRest.RequestOptionsBase): Promise<Models.BasketCreateDelDeleteBasketResponse>;
  /**
   * @param basketId The basket identifier.
   * @param callback The callback
   */
  deleteBasket(basketId: number, callback: msRest.ServiceCallback<boolean>): void;
  /**
   * @param basketId The basket identifier.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteBasket(basketId: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<boolean>): void;
  deleteBasket(basketId: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<boolean>, callback?: msRest.ServiceCallback<boolean>): Promise<Models.BasketCreateDelDeleteBasketResponse> {
    return this.client.sendOperationRequest(
      {
        basketId,
        options
      },
      deleteBasketOperationSpec,
      callback) as Promise<Models.BasketCreateDelDeleteBasketResponse>;
  }

  /**
   * @summary Get a basket and everything in it.
   * @param basketId The basket identifier.
   * @param acceptLanguage The culture you wish to get data in, api/content/language can provide
   * valid cultures.
   * @param [options] The optional parameters
   * @returns Promise<Models.BasketCreateDelGetBasketResponse>
   */
  getBasket(basketId: number, acceptLanguage: string, options?: msRest.RequestOptionsBase): Promise<Models.BasketCreateDelGetBasketResponse>;
  /**
   * @param basketId The basket identifier.
   * @param acceptLanguage The culture you wish to get data in, api/content/language can provide
   * valid cultures.
   * @param callback The callback
   */
  getBasket(basketId: number, acceptLanguage: string, callback: msRest.ServiceCallback<Models.GalaxyApiModelsBasketItemBasket>): void;
  /**
   * @param basketId The basket identifier.
   * @param acceptLanguage The culture you wish to get data in, api/content/language can provide
   * valid cultures.
   * @param options The optional parameters
   * @param callback The callback
   */
  getBasket(basketId: number, acceptLanguage: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GalaxyApiModelsBasketItemBasket>): void;
  getBasket(basketId: number, acceptLanguage: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.GalaxyApiModelsBasketItemBasket>, callback?: msRest.ServiceCallback<Models.GalaxyApiModelsBasketItemBasket>): Promise<Models.BasketCreateDelGetBasketResponse> {
    return this.client.sendOperationRequest(
      {
        basketId,
        acceptLanguage,
        options
      },
      getBasketOperationSpec,
      callback) as Promise<Models.BasketCreateDelGetBasketResponse>;
  }

  /**
   * @summary Find a basket by the session identifier.
   * @param pointOfSalesId The point of sales identifier.
   * @param online3Session The online 3 session.
   * @param online3Id The online 3 identifier
   * @param [options] The optional parameters
   * @returns Promise<Models.BasketCreateDelFindByOnline3SessionResponse>
   */
  findByOnline3Session(pointOfSalesId: number, online3Session: string, online3Id: number, options?: msRest.RequestOptionsBase): Promise<Models.BasketCreateDelFindByOnline3SessionResponse>;
  /**
   * @param pointOfSalesId The point of sales identifier.
   * @param online3Session The online 3 session.
   * @param online3Id The online 3 identifier
   * @param callback The callback
   */
  findByOnline3Session(pointOfSalesId: number, online3Session: string, online3Id: number, callback: msRest.ServiceCallback<number>): void;
  /**
   * @param pointOfSalesId The point of sales identifier.
   * @param online3Session The online 3 session.
   * @param online3Id The online 3 identifier
   * @param options The optional parameters
   * @param callback The callback
   */
  findByOnline3Session(pointOfSalesId: number, online3Session: string, online3Id: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<number>): void;
  findByOnline3Session(pointOfSalesId: number, online3Session: string, online3Id: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<number>, callback?: msRest.ServiceCallback<number>): Promise<Models.BasketCreateDelFindByOnline3SessionResponse> {
    return this.client.sendOperationRequest(
      {
        pointOfSalesId,
        online3Session,
        online3Id,
        options
      },
      findByOnline3SessionOperationSpec,
      callback) as Promise<Models.BasketCreateDelFindByOnline3SessionResponse>;
  }

  /**
   * @summary Deletes the booking item from the basket.
   * @param basketId The basket identifier.
   * @param bookItemId The booking item.
   * @param [options] The optional parameters
   * @returns Promise<Models.BasketCreateDelDeleteBookingItemResponse>
   */
  deleteBookingItem(basketId: number, bookItemId: number, options?: msRest.RequestOptionsBase): Promise<Models.BasketCreateDelDeleteBookingItemResponse>;
  /**
   * @param basketId The basket identifier.
   * @param bookItemId The booking item.
   * @param callback The callback
   */
  deleteBookingItem(basketId: number, bookItemId: number, callback: msRest.ServiceCallback<boolean>): void;
  /**
   * @param basketId The basket identifier.
   * @param bookItemId The booking item.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteBookingItem(basketId: number, bookItemId: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<boolean>): void;
  deleteBookingItem(basketId: number, bookItemId: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<boolean>, callback?: msRest.ServiceCallback<boolean>): Promise<Models.BasketCreateDelDeleteBookingItemResponse> {
    return this.client.sendOperationRequest(
      {
        basketId,
        bookItemId,
        options
      },
      deleteBookingItemOperationSpec,
      callback) as Promise<Models.BasketCreateDelDeleteBookingItemResponse>;
  }

  /**
   * @summary Toggle cancellation insurance.
   * @param basketId The basket identifier.
   * @param cancellationId The cancellation insurance.
   * @param state The state (checked=true).
   * @param [options] The optional parameters
   * @returns Promise<Models.BasketCreateDelSetCancellationInsuranceResponse>
   */
  setCancellationInsurance(basketId: number, cancellationId: number, state: boolean, options?: msRest.RequestOptionsBase): Promise<Models.BasketCreateDelSetCancellationInsuranceResponse>;
  /**
   * @param basketId The basket identifier.
   * @param cancellationId The cancellation insurance.
   * @param state The state (checked=true).
   * @param callback The callback
   */
  setCancellationInsurance(basketId: number, cancellationId: number, state: boolean, callback: msRest.ServiceCallback<boolean>): void;
  /**
   * @param basketId The basket identifier.
   * @param cancellationId The cancellation insurance.
   * @param state The state (checked=true).
   * @param options The optional parameters
   * @param callback The callback
   */
  setCancellationInsurance(basketId: number, cancellationId: number, state: boolean, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<boolean>): void;
  setCancellationInsurance(basketId: number, cancellationId: number, state: boolean, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<boolean>, callback?: msRest.ServiceCallback<boolean>): Promise<Models.BasketCreateDelSetCancellationInsuranceResponse> {
    return this.client.sendOperationRequest(
      {
        basketId,
        cancellationId,
        state,
        options
      },
      setCancellationInsuranceOperationSpec,
      callback) as Promise<Models.BasketCreateDelSetCancellationInsuranceResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const createBasketOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v3/api/basket/create",
  requestBody: {
    parameterPath: "model",
    mapper: {
      ...Mappers.GalaxyApiModelsBasketCreateBasket,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.GalaxyApiModelsBasketCreateBasketResult
    },
    default: {}
  },
  serializer
};

const deleteBasketOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v3/api/basket/delete/{basketId}",
  urlParameters: [
    Parameters.basketId
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Boolean"
        }
      }
    },
    default: {}
  },
  serializer
};

const getBasketOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v3/api/basket/{basketId}",
  urlParameters: [
    Parameters.basketId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GalaxyApiModelsBasketItemBasket
    },
    default: {}
  },
  serializer
};

const findByOnline3SessionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v3/api/basket/findByOnline3Session",
  queryParameters: [
    Parameters.pointOfSalesId,
    Parameters.online3Session,
    Parameters.online3Id
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Number"
        }
      }
    },
    default: {}
  },
  serializer
};

const deleteBookingItemOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v3/api/basket/deleteItem/{basketId}/{bookItemId}",
  urlParameters: [
    Parameters.basketId,
    Parameters.bookItemId
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Boolean"
        }
      }
    },
    default: {}
  },
  serializer
};

const setCancellationInsuranceOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "v3/api/basket/cancellation/{basketId}/{cancellationId}/{state}",
  urlParameters: [
    Parameters.basketId,
    Parameters.cancellationId,
    Parameters.state
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Boolean"
        }
      }
    },
    default: {}
  },
  serializer
};
